// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexico.flex

package com.mycompany.proyectofinallf.backend.analizadorLexico;

import java.util.ArrayList;
import java.util.List;
import com.mycompany.proyectofinallf.backend.token.Token;
import com.mycompany.proyectofinallf.backend.token.TipoToken;
import com.mycompany.proyectofinallf.backend.PintarPalabras;


@SuppressWarnings("fallthrough")
public class AnalizadorLexicoDB {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int CONSULTA_SQL = 2;
  public static final int COMENTARIO_LINEA = 4;
  public static final int DDL = 6;
  public static final int IDENTIFICADOR = 8;
  public static final int SIGNOS = 10;
  public static final int TIPO_DE_DATO = 12;
  public static final int ESTRUCTURA_DECLARACION_TABLAS = 14;
  public static final int ATRIBUTOS_TABLA = 16;
  public static final int DEFINIR_VALOR = 18;
  public static final int ESTABLECER_VALOR_NO_NULO = 20;
  public static final int CONSTRUIR_LLAVE = 22;
  public static final int DDL_MODIFICADOR = 24;
  public static final int IDENTIFICADOR_UNIQUE = 26;
  public static final int IDENTIFICADOR_REFERENCES = 28;
  public static final int IDENTIFICADOR_KEY = 30;
  public static final int MODIFICADOR_DROP = 32;
  public static final int DML_INSERCION = 34;
  public static final int IDENTIFICADORES_PARA_INSERCION = 36;
  public static final int EVALUAR_DATOS_INSERCION = 38;
  public static final int DEFINIR_VALOR_NUEMRIC = 40;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6, 
     7,  7,  8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\3\1\2\0\1\1\22\0\1\1\6\0\1\2"+
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\5\12\11"+
    "\1\0\1\12\1\13\1\14\1\13\2\0\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\5\0"+
    "\1\46\1\0\32\47\u0185\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\24\0\1\1\1\2\20\1\1\3\1\4\1\5\1\6"+
    "\10\1\1\7\1\10\3\1\1\11\1\12\1\13\4\1"+
    "\1\14\13\1\1\15\10\1\1\16\1\17\2\1\1\0"+
    "\1\20\1\0\2\21\67\0\1\22\1\17\34\0\1\23"+
    "\1\0\1\24\14\0\1\25\14\0\1\22\6\0\1\26"+
    "\10\0\1\27\16\0\1\30\10\0\1\31\2\0\1\32"+
    "\1\33\3\0\1\34\24\0\1\35\1\36\12\0\1\37"+
    "\1\0\1\40\4\0\1\41\13\0\1\42\1\43\12\0"+
    "\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0320\0\u0348\0\u0370"+
    "\0\u0398\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488\0\u04b0"+
    "\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u0320"+
    "\0\u0320\0\u0320\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8"+
    "\0\u06e0\0\u0708\0\u0730\0\u0320\0\u0758\0\u0780\0\u07a8\0\u0320"+
    "\0\u07d0\0\u0320\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898\0\u08c0"+
    "\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0\0\u09d8\0\u0a00"+
    "\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18\0\u0b40"+
    "\0\u0b68\0\u0b90\0\u0bb8\0\u0320\0\u0be0\0\u0c08\0\u0c30\0\u0348"+
    "\0\u0320\0\u0c58\0\u0c80\0\u0320\0\u0ca8\0\u0cd0\0\u0cf8\0\u0d20"+
    "\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38\0\u0e60"+
    "\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28\0\u0f50\0\u0f78\0\u0fa0"+
    "\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\u0398\0\u1068\0\u1090\0\u10b8"+
    "\0\u10e0\0\u1108\0\u1130\0\u1158\0\u1180\0\u11a8\0\u11d0\0\u11f8"+
    "\0\u1220\0\u1248\0\u1270\0\u1298\0\u12c0\0\u12e8\0\u1310\0\u1338"+
    "\0\u1360\0\u1388\0\u13b0\0\u13d8\0\u1400\0\u1428\0\u1450\0\u1478"+
    "\0\u14a0\0\u14c8\0\u14f0\0\u1518\0\u0320\0\u1540\0\u1568\0\u1590"+
    "\0\u15b8\0\u15e0\0\u0c80\0\u1608\0\u1630\0\u1658\0\u1680\0\u16a8"+
    "\0\u16d0\0\u16f8\0\u1720\0\u1748\0\u1770\0\u1798\0\u17c0\0\u17e8"+
    "\0\u1810\0\u1838\0\u1860\0\u1888\0\u18b0\0\u18d8\0\u1900\0\u1928"+
    "\0\u1950\0\u0320\0\u1978\0\u10b8\0\u19a0\0\u19c8\0\u19f0\0\u1a18"+
    "\0\u1a40\0\u1a68\0\u1a90\0\u1ab8\0\u1ae0\0\u1b08\0\u1b30\0\u1b58"+
    "\0\u0320\0\u1b80\0\u1ba8\0\u1bd0\0\u1bf8\0\u1c20\0\u1c48\0\u1c70"+
    "\0\u1c98\0\u1cc0\0\u1ce8\0\u1d10\0\u1d38\0\u0320\0\u1d60\0\u1d88"+
    "\0\u1db0\0\u1dd8\0\u1e00\0\u1e28\0\u0320\0\u1e50\0\u1e78\0\u1ea0"+
    "\0\u1ec8\0\u1ef0\0\u1f18\0\u1f40\0\u1f68\0\u0320\0\u1f90\0\u1fb8"+
    "\0\u1fe0\0\u2008\0\u2030\0\u2058\0\u2080\0\u20a8\0\u20d0\0\u20f8"+
    "\0\u2120\0\u2148\0\u2170\0\u2198\0\u0320\0\u21c0\0\u21e8\0\u2210"+
    "\0\u2238\0\u2260\0\u2288\0\u22b0\0\u22d8\0\u0320\0\u2300\0\u2328"+
    "\0\u0320\0\u0320\0\u2350\0\u2378\0\u23a0\0\u0320\0\u23c8\0\u23f0"+
    "\0\u2418\0\u2440\0\u2468\0\u2490\0\u24b8\0\u24e0\0\u2508\0\u2530"+
    "\0\u2558\0\u2580\0\u25a8\0\u25d0\0\u25f8\0\u2620\0\u2648\0\u2670"+
    "\0\u2698\0\u26c0\0\u0320\0\u0320\0\u26e8\0\u2710\0\u2738\0\u2760"+
    "\0\u2788\0\u27b0\0\u27d8\0\u2800\0\u2828\0\u2850\0\u0320\0\u2878"+
    "\0\u0320\0\u28a0\0\u28c8\0\u28f0\0\u2918\0\u0320\0\u2940\0\u2968"+
    "\0\u2990\0\u29b8\0\u29e0\0\u2a08\0\u2a30\0\u2a58\0\u2a80\0\u2aa8"+
    "\0\u2ad0\0\u0320\0\u0320\0\u2af8\0\u2b20\0\u2b48\0\u2b70\0\u2b98"+
    "\0\u2bc0\0\u2be8\0\u2c10\0\u2c38\0\u2c60\0\u0320";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\25\1\26\1\27\12\25\1\30\1\31\1\32\1\33"+
    "\1\25\1\34\1\35\1\25\1\36\1\37\1\25\1\40"+
    "\2\25\1\41\3\25\1\42\1\25\1\43\1\25\1\44"+
    "\55\25\1\26\16\25\1\45\17\25\1\46\10\25\1\26"+
    "\45\25\1\47\1\25\1\26\1\25\1\50\1\51\1\25"+
    "\1\51\1\25\1\51\1\25\1\52\1\25\1\51\34\25"+
    "\1\26\14\25\1\53\1\25\1\54\4\25\1\55\4\25"+
    "\1\56\4\25\1\57\1\60\1\25\1\61\6\25\1\26"+
    "\15\25\1\62\27\25\1\63\1\25\1\26\1\25\1\64"+
    "\2\25\1\50\20\25\1\65\2\25\1\66\1\25\1\67"+
    "\14\25\1\26\2\25\1\70\4\25\1\71\1\72\36\25"+
    "\1\26\4\25\1\50\3\25\1\72\17\25\1\73\6\25"+
    "\1\74\7\25\1\26\1\25\2\51\5\25\1\72\7\25"+
    "\1\75\4\25\1\65\6\25\1\76\10\25\1\77\1\25"+
    "\1\26\10\25\1\72\2\25\1\100\1\101\1\102\1\103"+
    "\1\25\1\75\2\25\1\104\1\25\1\105\2\25\1\106"+
    "\4\25\1\107\1\110\1\111\1\112\4\25\1\77\1\25"+
    "\1\26\1\25\2\51\5\25\1\72\34\25\1\77\1\25"+
    "\1\26\45\25\1\113\1\25\1\26\1\25\2\51\5\25"+
    "\1\72\23\25\1\114\10\25\1\77\1\25\1\26\10\25"+
    "\1\72\4\25\1\115\1\25\1\116\3\25\1\117\12\25"+
    "\1\120\6\25\1\77\1\25\1\26\23\25\1\121\21\25"+
    "\1\77\1\25\1\26\1\25\2\51\1\25\1\51\33\25"+
    "\1\122\4\25\1\77\1\25\1\26\1\123\2\51\1\124"+
    "\1\51\1\124\1\25\1\71\1\72\1\125\6\25\1\126"+
    "\15\25\1\127\10\25\1\26\1\25\2\51\4\25\1\71"+
    "\1\72\35\25\50\0\2\130\1\131\45\130\30\0\1\132"+
    "\6\0\1\133\55\0\1\134\40\0\1\135\32\0\1\136"+
    "\14\0\1\137\47\0\1\140\47\0\1\141\43\0\1\142"+
    "\50\0\1\143\41\0\1\144\54\0\1\134\3\0\1\145"+
    "\32\0\1\146\62\0\1\147\37\0\1\150\40\0\1\151"+
    "\47\0\1\152\35\0\2\47\4\0\1\47\34\0\2\47"+
    "\25\0\1\153\5\0\1\154\31\0\1\155\3\0\1\156"+
    "\60\0\1\157\56\0\1\160\27\0\1\161\47\0\1\162"+
    "\43\0\1\163\65\0\1\164\17\0\2\63\4\0\1\63"+
    "\34\0\2\63\21\0\1\165\61\0\1\166\52\0\1\167"+
    "\21\0\1\170\1\71\71\0\1\166\5\0\1\171\40\0"+
    "\1\172\50\0\1\173\35\0\1\174\31\0\2\77\4\0"+
    "\1\77\34\0\2\77\20\0\1\175\7\0\1\176\44\0"+
    "\1\177\5\0\1\200\47\0\1\201\31\0\1\202\3\0"+
    "\1\203\14\0\1\204\43\0\1\205\36\0\1\206\67\0"+
    "\1\207\27\0\1\210\43\0\1\211\3\0\1\212\23\0"+
    "\1\213\34\0\1\214\32\0\1\215\35\0\2\113\4\0"+
    "\1\113\34\0\2\113\21\0\1\216\43\0\1\217\76\0"+
    "\1\220\25\0\1\134\42\0\1\211\64\0\1\221\32\0"+
    "\1\222\32\0\2\223\1\224\45\223\14\0\1\225\50\0"+
    "\1\226\70\0\1\227\51\0\1\230\26\0\1\134\51\0"+
    "\1\231\56\0\1\232\6\0\1\233\43\0\1\234\47\0"+
    "\1\235\47\0\1\236\53\0\1\237\35\0\1\240\53\0"+
    "\1\241\36\0\1\242\57\0\1\243\7\0\1\134\27\0"+
    "\1\244\50\0\1\245\66\0\1\246\25\0\1\247\54\0"+
    "\1\250\57\0\1\251\54\0\1\252\26\0\1\253\70\0"+
    "\1\254\40\0\1\255\54\0\1\256\55\0\1\257\41\0"+
    "\1\260\43\0\1\261\55\0\1\262\34\0\1\263\33\0"+
    "\1\264\66\0\1\265\44\0\1\266\60\0\1\267\33\0"+
    "\1\270\45\0\1\134\67\0\1\242\32\0\1\271\57\0"+
    "\1\272\44\0\1\273\1\0\1\274\55\0\1\275\26\0"+
    "\1\276\63\0\1\277\54\0\1\300\54\0\1\301\33\0"+
    "\1\302\54\0\1\303\27\0\1\304\75\0\1\305\37\0"+
    "\1\306\40\0\1\307\60\0\1\310\33\0\1\311\64\0"+
    "\1\312\35\0\1\313\62\0\1\314\37\0\1\315\17\0"+
    "\2\223\1\316\45\223\2\0\1\317\75\0\1\320\60\0"+
    "\1\321\27\0\1\322\43\0\1\323\53\0\1\324\62\0"+
    "\1\325\44\0\1\134\57\0\1\277\27\0\1\326\60\0"+
    "\1\134\42\0\1\327\43\0\1\330\47\0\1\331\43\0"+
    "\1\324\70\0\1\306\26\0\1\332\62\0\1\333\44\0"+
    "\1\334\52\0\1\335\40\0\1\336\53\0\1\337\43\0"+
    "\1\340\47\0\1\341\53\0\1\342\62\0\1\336\26\0"+
    "\1\343\67\0\1\344\41\0\1\345\46\0\1\134\54\0"+
    "\1\346\33\0\1\347\47\0\1\350\53\0\1\351\52\0"+
    "\1\352\60\0\1\353\45\0\1\354\31\0\1\355\53\0"+
    "\1\356\56\0\1\134\34\0\1\357\47\0\1\360\53\0"+
    "\1\361\52\0\1\306\57\0\1\355\30\0\1\134\63\0"+
    "\1\362\31\0\1\363\51\0\1\364\45\0\1\365\67\0"+
    "\1\327\43\0\1\366\55\0\1\367\17\0\1\370\75\0"+
    "\1\321\31\0\1\371\64\0\1\372\51\0\1\373\47\0"+
    "\1\306\45\0\1\374\51\0\1\134\45\0\1\134\30\0"+
    "\1\327\46\0\1\375\52\0\1\376\60\0\1\257\36\0"+
    "\1\377\57\0\1\342\41\0\1\u0100\62\0\1\u0101\26\0"+
    "\1\u0102\56\0\1\u0103\63\0\1\u0104\24\0\1\u0105\73\0"+
    "\1\306\33\0\1\u0106\60\0\1\u0107\43\0\1\305\36\0"+
    "\1\u0108\57\0\1\240\56\0\1\u0109\40\0\1\361\41\0"+
    "\1\u010a\62\0\1\u010b\26\0\1\u010c\73\0\1\u010d\32\0"+
    "\1\u010e\61\0\1\u010f\26\0\1\u0110\53\0\1\u0111\37\0"+
    "\1\u0112\57\0\1\u0113\66\0\1\u0114\24\0\1\u0115\47\0"+
    "\1\u0116\53\0\1\u0117\53\0\1\u0118\52\0\1\336\34\0"+
    "\1\u0117\70\0\1\u0119\47\0\1\165\34\0\1\240\45\0"+
    "\1\u011a\43\0\1\u011b\70\0\1\u011c\32\0\1\u011d\53\0"+
    "\1\u011e\52\0\1\355\40\0\1\u011f\43\0\1\u011d\53\0"+
    "\1\u0120\46\0\1\306\66\0\1\u0121\21\0\1\u0122\75\0"+
    "\1\333\42\0\1\336\53\0\1\336\30\0\1\336\45\0"+
    "\1\u0123\64\0\1\u0124\47\0\1\355\32\0\1\u0125\70\0"+
    "\1\355\30\0\1\u0126\62\0\1\u0127\26\0\1\u0128\63\0"+
    "\1\u0129\41\0\1\u012a\55\0\1\u012b\41\0\1\u012c\32\0"+
    "\1\u012d\77\0\1\u012e\36\0\1\u012f\60\0\1\327\36\0"+
    "\1\u0130\35\0\1\u0131\100\0\1\u0132\46\0\1\134\47\0"+
    "\1\u0133\12\0\1\u0134\56\0\1\u0135\47\0\1\u0136\40\0"+
    "\1\u0137\54\0\1\u0138\42\0\1\u0139\56\0\1\u013a\47\0"+
    "\1\u013b\40\0\1\u013c\47\0\1\u013d\47\0\1\u013e\45\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11400];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\24\0\2\11\21\1\3\11\11\1\1\11\3\1\1\11"+
    "\1\1\1\11\31\1\1\11\3\1\1\0\1\11\1\0"+
    "\1\1\1\11\67\0\1\1\1\11\34\0\1\11\1\0"+
    "\1\1\14\0\1\11\14\0\1\11\6\0\1\11\10\0"+
    "\1\11\16\0\1\11\10\0\1\11\2\0\2\11\3\0"+
    "\1\11\24\0\2\11\12\0\1\11\1\0\1\11\4\0"+
    "\1\11\13\0\2\11\12\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    // Código Java
    private final String NARANJA = "#F0A30A";
    private final String MORADO = "#6A00FF";
    private final String AZUL = "#414ED9";
    private final String AMARILLO = "#FFD300";
    private final String VERDE = "#60A917";
    private final String FUCSIA = "#D80073";
    private final String NEGRO = "#000000";
    private final String GRIS = "#757575";

    private List<Token> listaTokens = new ArrayList<>();
    private List<Token> listaErrores = new ArrayList<>();
    public PintarPalabras pintar = new PintarPalabras();
    private int contadorSaltosDeLinea = 0;

    public void añadirToken(Token token){
        listaTokens.add(token);
    }

    public List<Token> getListaTokens(){
        return listaTokens;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoDB(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(yytext());
            }
          // fall through
          case 37: break;
          case 2:
            { añadirToken(new Token(yytext(), TipoToken.ESPACIOS, null, yyline, yycolumn));
            }
          // fall through
          case 38: break;
          case 3:
            { añadirToken(new Token(yytext(), TipoToken.IDENTIFICADOR, FUCSIA, yyline, yycolumn)); yybegin(SIGNOS);
            }
          // fall through
          case 39: break;
          case 4:
            { añadirToken(new Token(yytext(), TipoToken.SIGNOS, NEGRO, yyline, yycolumn)); yybegin(ESTRUCTURA_DECLARACION_TABLAS);
            }
          // fall through
          case 40: break;
          case 5:
            { añadirToken(new Token(yytext(), TipoToken.SIGNOS, NEGRO, yyline, yycolumn));
            }
          // fall through
          case 41: break;
          case 6:
            { añadirToken(new Token(yytext(), TipoToken.SIGNOS, NEGRO, yyline, yycolumn)); yybegin(YYINITIAL);
            }
          // fall through
          case 42: break;
          case 7:
            { añadirToken(new Token(yytext(), TipoToken.IDENTIFICADOR, FUCSIA, yyline, yycolumn)); yybegin(TIPO_DE_DATO);
            }
          // fall through
          case 43: break;
          case 8:
            { añadirToken(new Token(yytext(), TipoToken.SIGNOS, NEGRO, yyline, yycolumn)); yybegin(DEFINIR_VALOR);
            }
          // fall through
          case 44: break;
          case 9:
            { añadirToken(new Token(yytext(), TipoToken.SIGNOS, NEGRO, yyline, yycolumn));yybegin(ESTABLECER_VALOR_NO_NULO);
            }
          // fall through
          case 45: break;
          case 10:
            { añadirToken(new Token(yytext(), TipoToken.ENTERO, AZUL, yyline, yycolumn));
            }
          // fall through
          case 46: break;
          case 11:
            { añadirToken(new Token(yytext(), TipoToken.SIGNOS, NEGRO, yyline, yycolumn));yybegin(YYINITIAL);
            }
          // fall through
          case 47: break;
          case 12:
            { añadirToken(new Token(yytext(), TipoToken.IDENTIFICADOR, FUCSIA, yyline, yycolumn));
            }
          // fall through
          case 48: break;
          case 13:
            { añadirToken(new Token(yytext(), TipoToken.IDENTIFICADOR, FUCSIA, yyline, yycolumn));yybegin(IDENTIFICADOR_KEY);
            }
          // fall through
          case 49: break;
          case 14:
            { añadirToken(new Token(yytext(), TipoToken.ARITMETICO, NEGRO, yyline, yycolumn));
            }
          // fall through
          case 50: break;
          case 15:
            { añadirToken(new Token(yytext(), TipoToken.RELACIONAL, NEGRO, yyline, yycolumn));
            }
          // fall through
          case 51: break;
          case 16:
            { System.out.println("Cadena registrada: "+yytext()); añadirToken(new Token(yytext(), TipoToken.CADENA, VERDE, yyline, yycolumn));
            }
          // fall through
          case 52: break;
          case 17:
            { añadirToken(new Token(yytext(), TipoToken.CREATE, NARANJA, yyline, yycolumn));
            }
          // fall through
          case 53: break;
          case 18:
            { añadirToken(new Token(yytext(), TipoToken.ARITMETICO, VERDE, yyline, yycolumn));
            }
          // fall through
          case 54: break;
          case 19:
            { añadirToken(new Token(yytext(), TipoToken.CREATE, NARANJA, yyline, yycolumn));yybegin(ESTABLECER_VALOR_NO_NULO);
            }
          // fall through
          case 55: break;
          case 20:
            { añadirToken(new Token(yytext(), TipoToken.DECIMAL, AZUL, yyline, yycolumn));
            }
          // fall through
          case 56: break;
          case 21:
            { añadirToken(new Token(yytext(), TipoToken.CREATE, NARANJA, yyline, yycolumn));yybegin(IDENTIFICADOR_KEY);
            }
          // fall through
          case 57: break;
          case 22:
            { añadirToken(new Token(yytext(), TipoToken.CREATE, NARANJA, yyline, yycolumn)); yybegin(MODIFICADOR_DROP);
            }
          // fall through
          case 58: break;
          case 23:
            { añadirToken(new Token(yytext(), TipoToken.TIPO_DE_DATO, MORADO, yyline, yycolumn));yybegin(ATRIBUTOS_TABLA);
            }
          // fall through
          case 59: break;
          case 24:
            { añadirToken(new Token(yytext(), TipoToken.TIPO_DE_DATO, MORADO, yyline, yycolumn));
            }
          // fall through
          case 60: break;
          case 25:
            { añadirToken(new Token(yytext(), TipoToken.CREATE, NARANJA, yyline, yycolumn));yybegin(IDENTIFICADORES_PARA_INSERCION);
            }
          // fall through
          case 61: break;
          case 26:
            { añadirToken(new Token(yytext(), TipoToken.BOOLEANO, AZUL, yyline, yycolumn));
            }
          // fall through
          case 62: break;
          case 27:
            { añadirToken(new Token(yytext(), TipoToken.CREATE, NARANJA, yyline, yycolumn)); yybegin(DDL_MODIFICADOR);
            }
          // fall through
          case 63: break;
          case 28:
            { añadirToken(new Token(yytext(), TipoToken.CREATE, NARANJA, yyline, yycolumn)); yybegin(IDENTIFICADOR);
            }
          // fall through
          case 64: break;
          case 29:
            { añadirToken(new Token(yytext(), TipoToken.CREATE, NARANJA, yyline, yycolumn)); yybegin(DDL);
            }
          // fall through
          case 65: break;
          case 30:
            { añadirToken(new Token(yytext(), TipoToken.CREATE, NARANJA, yyline, yycolumn)); yybegin(DML_INSERCION);
            }
          // fall through
          case 66: break;
          case 31:
            { añadirToken(new Token(yytext(), TipoToken.CREATE, NARANJA, yyline, yycolumn));yybegin(IDENTIFICADOR_UNIQUE);
            }
          // fall through
          case 67: break;
          case 32:
            { añadirToken(new Token(yytext(), TipoToken.CREATE, NARANJA, yyline, yycolumn));yybegin(EVALUAR_DATOS_INSERCION);
            }
          // fall through
          case 68: break;
          case 33:
            { añadirToken(new Token(yytext(), TipoToken.TIPO_DE_DATO, MORADO, yyline, yycolumn));yybegin(DEFINIR_VALOR_NUEMRIC);
            }
          // fall through
          case 69: break;
          case 34:
            { añadirToken(new Token(yytext(), TipoToken.CREATE, NARANJA, yyline, yycolumn)); yybegin(CONSTRUIR_LLAVE);
            }
          // fall through
          case 70: break;
          case 35:
            { añadirToken(new Token(yytext(), TipoToken.CREATE, NARANJA, yyline, yycolumn));yybegin(IDENTIFICADOR_REFERENCES);
            }
          // fall through
          case 71: break;
          case 36:
            { añadirToken(new Token(yytext(), TipoToken.ARITMETICO, AMARILLO, yyline, yycolumn));
            }
          // fall through
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexicoDB [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexicoDB scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexicoDB(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
